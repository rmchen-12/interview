/**
 * 0-1b背包问题
 * N个物品，重量wt，假值val，背包重W，最有价值的组合
 * N = 3, W = 4
 * wt = [2, 1, 3]
 * val = [4, 2, 3]
 *
 * 选前两个，价值6且不超过4
 */

/**
 * 第一步要明确两点，「状态」和「选择」。
 *     状态有两个，就是「背包的容量」和「可选择的物品」。
 *     对于每件物品，你能选择什么？选择就是「装进背包」或者「不装进背包」嘛
 * 第二步要明确 dp 数组的定义
 *     首先看看刚才找到的「状态」，有两个，也就是说我们需要一个二维 dp 数组。
 *     dp[i][w] 的定义如下：对于前 i 个物品，当前背包的容量为 w，这种情况下可以装的最大价值是 dp[i][w]。
 *     根据这个定义，我们想求的最终答案就是 dp[N][W]。base case 就是 dp[0][..] = dp[..][0] = 0
 * 第三步，根据「选择」，思考状态转移的逻辑。
 */

function knapsack(W, N, wt, val) {
  const dp = new Array(N + 1).fill(new Array(W + 1).fill(0));

  for (let i = 1; i <= N; i++) {
    for (let j = 1; j <= W; j++) {
      if (W < wt[i - 1]) {
        // 这种情况下只能选择不装入背包
        dp[i][w] = dp[i - 1][w];
      } else {
        // 装入或者不装入背包，择优
        dp[i][w] = Math.max(dp[i - 1][w - wt[i - 1]] + val[i], dp[i - 1][w]);
      }
    }
  }
  return dp[N][W];
}
